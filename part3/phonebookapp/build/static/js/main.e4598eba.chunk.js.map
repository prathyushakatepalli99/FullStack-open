{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Filter","props","type","value","onChange","InputName","InputNumber","InputButton","text","Content","personsToShow","map","person","name","number","id","App","query","useState","Phonebook","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchName","setSearchName","filterChange","setFilterChange","filter","toLowerCase","split","join","indexOf","event","console","log","target","onSubmit","preventDefault","personObject","length","i","window","alert","concat","repeatOrNot","a","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4598eba.chunk.js","sourcesContent":["import React , {useState} from 'react';\nimport ReactDOM from 'react-dom';\n\n\nconst Filter = (props) => {\n\treturn (\n\t\t<div>\n\t\t\tSearch By Name: <input \n\t\t\t\t\t\t\t\ttype = {props.type}\n\t\t\t\t\t\t\t\tvalue = {props.value} \n\t\t\t\t\t\t\t\tonChange = {props.onChange} \n\t\t\t\t\t\t\t/>\n\t\t</div>\n\t)\n}\n\nconst InputName = (props) => {\n\treturn (\n\t\t<div>\n\t\t\tname: <input \n\t\t\t\t\t\ttype = {props.type} \n\t\t\t\t\t\tvalue = {props.value} \n\t\t\t\t\t\tonChange = {props.onChange} \n\t\t\t\t\t/>\n\t\t</div>\n\t)\n}\n\nconst InputNumber = (props) => {\n\treturn (\n\t\t<div>\n\t\t\tnumber: <input \n\t\t\t\t\t\ttype = {props.type} \n\t\t\t\t\t\tvalue = {props.value} \n\t\t\t\t\t\tonChange = {props.onChange} \n\t\t\t\t    /> \t\n\t\t</div>\n\t)\n}\n\nconst InputButton = (props) => {\n  return (\n    <div>\n      <button type= {props.type}>{props.text}</button>\n    </div>\n  )\n}\n\nconst Content = (props) => {\n  return(\n  props.personsToShow.map(person => <p key = {person.id}>{person.name}: {person.number}</p>)\n  )\n}\n\nconst App = (props) => {\n  const [ persons, setPersons] = useState(props.Phonebook) \n\tconst [ newName, setNewName ] = useState(\"\")\n\tconst [ newNumber, setNewNumber ] = useState(\"\")\n\tconst [ searchName, setSearchName ] = useState(\"\")\n\tconst [ filterChange, setFilterChange ] = useState(false) \n\n  const addNewName = (event) => {\n\t\tevent.preventDefault()\n\t\t\n\t\tconst personObject = {\n\t\t\tid: persons.length + 1, \n\t\t\tname: newName,\n\t\t\tnumber: newNumber\n\t\t}\n\t\t\n\t\tconst repeatOrNot = () => {\n\t\t\tfor (let i = 0; i < persons.length; i++) {\n\t\t\t\tif (newName === persons[i].name) {\n\t\t\t\t\twindow.alert(newName + \" is already added to phonebook\")\n\t\t\t\t\tsetPersons(persons)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetPersons(persons.concat(personObject))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\trepeatOrNot()\n\t\tsetNewName(\"\")\n\t\tsetNewNumber(\"\")\n\t}\n\t\n\tconst deleteName = (event) => {\n\t\tevent.preventDefault()\n\t\tconst a = persons.slice(0, persons.length-1)\n\t\tsetPersons(a)\n\t}\n\t\n\tconst handleNameChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewName(event.target.value)\n\t}\n\t\n\tconst handleNumberChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewNumber(event.target.value)\n\t}\n\t\n\tconst handleSearchName = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetSearchName(event.target.value)\n\t\tsetFilterChange(true)\n\t}\n\t\n\t\n\tconst filterItems = (query) => {\n\t\tconst filter_result = persons.filter(person => person.name.toLowerCase().split(\" \").join(\"\").indexOf(query.toLowerCase()) !== -1)\n\t\treturn filter_result\n\t}\n\n  const personsToShow = filterChange\n\t\t? filterItems(searchName)\n\t\t: persons\n\n   return (\n   <div>\n   <h2>Phonebook</h2>\n   <div>\n\t\t\t\t<Filter type = \"text\" value = {searchName} onChange = {handleSearchName} />\n\t\t</div>\n    <h3>Add a new contact</h3>\n\t\t\t<div>\n\t\t\t\t<form onSubmit = {addNewName}>\n\t\t\t\t<InputName type = \"text\" value = {newName} onChange = {handleNameChange} />\n\t\t\t\t<br />\n\t\t\t\t<InputNumber type = \"text\" value = {newNumber} onChange = {handleNumberChange} />\n\t\t\t\t<br />\n\t\t\t\t<InputButton type = \"submit\" text = \"Add\" />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div>\n\t\t\t<br />\n\t\t\t\t<form onSubmit = {deleteName}>\n\t\t\t\t<InputButton type = \"submit\" text = \"Delete\" />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t\n\t\t\t<h3>Numbers</h3>\n\t\t\t<Content personsToShow = {personsToShow} />\n     </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './App.js';\n\nconst Phonebook =  [\n  { \n    id: 1,\n    name: 'Adam', \n    number: \"91234567809\"\n  },\n  {\n    id: 2,\n    name: 'Arto', \n    number: \"45676112347\"\n  },\n  {\n    id: 3,\n    name: 'Ma Yutao', \n    number: \"76436573858\"\n  },\n  {\n    id: 4,\n    name: 'Dai Daisy', \n    number: \"12345678901\"\n  },\n  {\n    id: 5,\n    name: 'Dan Abramoy', \n    number: \"34567890123\"\n  }\n ]\n\n \nReactDOM.render(\n  <React.StrictMode>(<App Phonebook = {Phonebook} />, \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// import React , {useState} from 'react';\n// import ReactDOM from 'react-dom';\n\n// const Phonebook =  [\n//     { \n//       id: 1,\n//       name: 'Adam', \n//       number: \"91234567809\"\n//     },\n//     {\n//       id: 2,\n//       name: 'Arto', \n//       number: \"45676112347\"\n//     },\n//     {\n//       id: 3,\n//       name: 'Ma Yutao', \n//       number: \"76436573858\"\n//     },\n//     {\n//       id: 4,\n//       name: 'Dai Daisy', \n//       number: \"12345678901\"\n//     },\n//     {\n//       id: 5,\n//       name: 'Dan Abramoy', \n//       number: \"34567890123\"\n//     }\n//    ]\n\n// const Filter = (props) => {\n// \treturn (\n// \t\t<div>\n// \t\t\tSearch By Name: <input \n// \t\t\t\t\t\t\t\ttype = {props.type}\n// \t\t\t\t\t\t\t\tvalue = {props.value} \n// \t\t\t\t\t\t\t\tonChange = {props.onChange} \n// \t\t\t\t\t\t\t/>\n// \t\t</div>\n// \t)\n// }\n\n// const InputName = (props) => {\n// \treturn (\n// \t\t<div>\n// \t\t\tname: <input \n// \t\t\t\t\t\ttype = {props.type} \n// \t\t\t\t\t\tvalue = {props.value} \n// \t\t\t\t\t\tonChange = {props.onChange} \n// \t\t\t\t\t/>\n// \t\t</div>\n// \t)\n// }\n\n// const InputNumber = (props) => {\n// \treturn (\n// \t\t<div>\n// \t\t\tnumber: <input \n// \t\t\t\t\t\ttype = {props.type} \n// \t\t\t\t\t\tvalue = {props.value} \n// \t\t\t\t\t\tonChange = {props.onChange} \n// \t\t\t\t    /> \t\n// \t\t</div>\n// \t)\n// }\n\n// const InputButton = (props) => {\n//   return (\n//     <div>\n//       <button type= {props.type}>{props.text}</button>\n//     </div>\n//   )\n// }\n\n// const Content = (props) => {\n//   return(\n//   props.personsToShow.map(person => <p key = {person.id}>{person.name}: {person.number}</p>)\n//   )\n// }\n\n// function App(props) {\n//   const [ persons, setPersons] = useState(props.Phonebook) \n// \tconst [ newName, setNewName ] = useState(\"\")\n// \tconst [ newNumber, setNewNumber ] = useState(\"\")\n// \tconst [ searchName, setSearchName ] = useState(\"\")\n// \tconst [ filterChange, setFilterChange ] = useState(false) \n\n//   const addNewName = (event) => {\n// \t\tevent.preventDefault()\n\t\t\n// \t\tconst personObject = {\n// \t\t\tid: persons.length + 1, \n// \t\t\tname: newName,\n// \t\t\tnumber: newNumber\n// \t\t}\n\t\t\n// \t\tconst repeatOrNot = () => {\n// \t\t\tfor (let i = 0; i < persons.length; i++) {\n// \t\t\t\tif (newName === persons[i].name) {\n// \t\t\t\t\twindow.alert(newName + \" is already added to phonebook\")\n// \t\t\t\t\tsetPersons(persons)\n// \t\t\t\t}\n// \t\t\t\telse {\n// \t\t\t\t\tsetPersons(persons.concat(personObject))\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n\t\t\n// \t\trepeatOrNot()\n// \t\tsetNewName(\"\")\n// \t\tsetNewNumber(\"\")\n// \t}\n\t\n// \tconst deleteName = (event) => {\n// \t\tevent.preventDefault()\n// \t\tconst a = persons.slice(0, persons.length-1)\n// \t\tsetPersons(a)\n// \t}\n\t\n// \tconst handleNameChange = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\t\n// \tconst handleNumberChange = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n\t\n// \tconst handleSearchName = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetSearchName(event.target.value)\n// \t\tsetFilterChange(true)\n// \t}\n\t\n\t\n// \tconst filterItems = (query) => {\n// \t\tconst filter_result = persons.filter(person => person.name.toLowerCase().split(\" \").join(\"\").indexOf(query.toLowerCase()) !== -1)\n// \t\treturn filter_result\n// \t}\n\n//   const personsToShow = filterChange\n// \t\t? filterItems(searchName)\n// \t\t: persons\n\n//    return (\n//    <div>\n//    <h2>Phonebook</h2>\n//    <div>\n// \t\t\t\t<Filter type = \"text\" value = {searchName} onChange = {handleSearchName} />\n// \t\t</div>\n//     <h3>Add a new contact</h3>\n// \t\t\t<div>\n// \t\t\t\t<form onSubmit = {addNewName}>\n// \t\t\t\t<InputName type = \"text\" value = {newName} onChange = {handleNameChange} />\n// \t\t\t\t<br />\n// \t\t\t\t<InputNumber type = \"text\" value = {newNumber} onChange = {handleNumberChange} />\n// \t\t\t\t<br />\n// \t\t\t\t<InputButton type = \"submit\" text = \"Add\" />\n// \t\t\t\t</form>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div>\n// \t\t\t<br />\n// \t\t\t\t<form onSubmit = {deleteName}>\n// \t\t\t\t<InputButton type = \"submit\" text = \"Delete\" />\n// \t\t\t\t</form>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<h3>Numbers</h3>\n// \t\t\t<Content personsToShow = {personsToShow} />\n//      </div>\n//     );\n// }\n// // export default App;\n// ReactDOM.render(<App Phonebook = {Phonebook} />, \n//   document.getElementById('root'));"],"sourceRoot":""}